From Page 28;
Local Variables:
{
    *Local variables must be initialized before use.

}
Instance and Class Variables:{
    boolean                   ->    false
    byte , short , int , long ->    0 (in the type’s bit-length)
    float , double            ->    0.0 (in the type’s bit-length)
    char                      ->    '\u0000' (NUL) 
    *You have to memorize this chart because of exam questions has that knowledge.

}
Understanding Variable Scope:{
     If primitive types are local variable they have to initialized but
     if they globals they don't need to initialize because they are already 
     default values.

}
Ordering Elements in a Class:{

Element                  Example         Required?           Where does it go?
Package declaration -    package abc;        No             First line in the file
Import statements        import java.util.*; No             Immediately after the package
Class declaration        public class C      Yes            Immediately after the import
Field declarations       int value;          No             Anywhere inside a class
Method declarations      void method()       No             Anywhere inside a class
*If you use two classes in same file you have to declare as public one of class that must be
 

}

Destroying Objects:{
    *all java objects stored in memory heap

}
Garbage Collection:{
    *You do need to know that System.gc() is not guaranteed to run
    An object is no longer reachable one of two situation occurs:{
        *the object no longer has any references point to it
        *all references to object have gone out of scope.
    }
    you have know about differences between objects and references;
    references are all same size but object are stored in heap and all objects size different
    each others.
    *Remember, finalize() is only run when the object is eligible for garbage collection.

}
Chapter 1 Book Summary:{
    In this chapter, you saw that Java classes consist of members called fi elds and methods. An
object is an instance of a Java class. There are three styles of comment: a single-line com-
ment ( // ), a multiline comment ( /* */ ), and a Javadoc comment ( /** */ ).
Java begins program execution with a main() method. The most common signature for
this method run from the command line is public static void main(String[] args) .
Arguments are passed in after the class name, as in java NameOfClass firstArgument .
Arguments are indexed starting with 0.

    Java code is organized into folders called packages. To reference classes in other pack-
ages, you use an import statement. A wildcard ending an import statement means you want
to import all classes in that package. It does not include packages that are inside that one.
java.lang is a special package that does not need to be imported.
Constructors create Java objects. A constructor is a method matching the class name and
omitting the return type. When an object is instantiated, fi elds and blocks of code are
initialized fi rst. Then the constructor is run.
Primitive types are the basic building blocks of Java types. They are assembled into
reference types. Reference types can have methods and be assigned to null . In addition to
“normal” numbers, numeric literals are allowed to begin with 0 (octal), 0x (hex), 0X (hex),
0b (binary), or 0B (binary). Numeric literals are also allowed to contain underscores as long
as they are directly between two other numbers.
Declaring a variable involves stating the data type and giving the variable a name.
Variables that represent fi elds in a class are automatically initialized to their correspond-
ing “zero” or null value during object instantiation. Local variables must be specifi cally
initialized. Identifi ers may contain letters, numbers, $, or _. Identifi ers may not begin with
numbers.

    Scope refers to that portion of code where a variable can be accessed. There are three
kinds of variables in Java, depending on their scope: instance variables, class variables, andExam Essentials
local variables. Instance variables are the nonstatic fi elds of your class. Class variables are
the static fi elds within a class. Local variables are declared within a method.
For some class elements, order matters within the fi le. The package statement comes fi rst
if present. Then comes the import statements if present. Then comes the class declaration.
Fields and methods are allowed to be in any order within the class.
Garbage collection is responsible for removing objects from memory when they can
never be used again. An object becomes eligible for garbage collection when there are no
more references to it or its references have all gone out of scope. The finalize() method
will run once for each object if/when it is fi rst garbage collected.
Java code is object oriented, meaning all code is defi ned in classes. Access modifi ers
allow classes to encapsulate data. Java is platform independent, compiling to bytecode. It is
robust and simple by not providing pointers or operator overloading. Finally, Java is secure
because it runs inside a virtual machine
}

/////////////////////////////CHAPTER 2/////////////////////////////////
* Using Operators and Decision Constructs
 *Using Loop Constructs
 

 Understanding Java Operators:{
     Three favors of operators are avaible in java -> Ternary,Binary,Unary
     
 },
 Numeric Promotion:{
     Numeric Promotion Rules:{
         1-if two data types have diffrent types Java will automatically promote one of data type to larger one data type,
         2-if one of the data values integral other one is floating-point Java will automatically promote integral data to 
         floating-point
         3-Smaller data types such as byte,chart,short are first promoted to int any time they're used in 
         Java binary arithmetic even if neither of the operands is int,
         4-After all promoting operatation done have the same data type the resulting value will show prometed data type
         (short+short)=(int){
             	short x = 10;
	            short y = 3;
	            // short z = x * y; // DOES NOT COMPILE
	            /**
	             * that line of 6 doesn't compile why ? because if you multiplicate two smaller
	             * type that types promote to int so that result type will be int but we are
	             * declare as a short we should cast to smaller data
	             */
	            int z = (x * y);
	            /**
         }
         Java automatically promoted to floating data types to double
     }
 }
 Working with Unary Operators:{
     Unary operator    Description
     +                 Indicates a number is positive, although numbers are assumed
                       to be positive in Java unless accompanied by a negative unary operator.
     -                 Indicates a literal number is negative or negates an expression.
 }
 Logical Complement and Negation Operators:{
     keep an eye with boolean data type like other programming languages accepts 0 or 1 to boolean but
     java doesn't accept that literals.
 }
 Increment and Decrement Operators:{
     ex:int x = 3; int y = ++x * 5 / x-- + --x;
     {
         that questions must be solved step by step you have to keep in mind that is java executes
         left  to right
         step 1: incrementing x and multiple with 5 y = 4 * 5 / ..... x = 4;
         step 2: decrement x but first value uses in executing y=4*5/ 4 - 2 so decrement first operands showing in this process
         so x real value is 3 if it predecrement show up you have to decrement that so result is 
         y = 4 * 5 / 4 - 2 = 18
     }

 }
 Using Additional Binary Operators:{
     Compound Assignment Operators:{
        int x = 2, z = 3; x = x * z;
        // Simple assignment operator x *= z;
        // Compound assignment operator
        long x = 5; long y = (x=3);
        System.out.println(x); // Outputs 3
        System.out.println(y); // Also, outputs 3
        /*
        The key here is that (x=3) does two things. First, it sets the value of the variable x to be 3. 
        Second, it returns a value of the assignment, which is also 3. The exam creators are fond of inserting
        the assignment operator = in the middle of an expression and using the value of the assignment as part
        of a more complex expression.
        */
       
     },
     Relational Operators:{
         < Strictly less than
         <= Less than or equal to
         > Strictly greater than
         >= Greater than or equal to
     },
     Logical Operators:{
         if(x != null && x.getValue() < 5) {  // Do something }
        In this example, if x was null , then the short-circuit prevents a NullPointerException
         from ever being thrown, since the evaluation of x.getValue() < 5 is never reached. Alternatively, 
         if we used a logical &, then both sides would always be evaluated and when x was null this would
         throw an exception:
         int x = 6; boolean y = (x >= 6) || (++x <= 7); System.out.println(x); //output 6
        Because x >= 6 is true, the increment operator on the right-hand side of the expression is never evaluated,
        so the output is 6.
     }
 }
 Understanding Java Statements:{
     The if-then Statement:{
         if(booleanExpression) ->left to right if keyword/expression paranthesis require/booleanExpression
         {}-> if you statement single you have not to add this braces but if it multiple you have to
         {
             		int yo = 0;
		if (yo < 10)
			System.out.println("Too Low");
		else
			System.out.println("Just right");
        

        //that code compiles correctly
         }
     }
     switch statement:{
         Data types supported by switch statements include the following:
          ■ int and Integer
           ■ byte and Byte 
           ■ short and Short 
           ■ char and Character 
           ■ int and Integer
           ■ String 
           ■ enum values
    For the exam, we recommend you memorize this list. Note that boolean and long, and their associated wrapper classes,
     are not supported by switch statements.
     // you can use ternary statement in case section but you have to sure about in process variables constant
     so if it changing dynamically switch statement will occurs compile error.
     The exam creators are fond of switch examples that are missing break statements! 
     },
     The Basic for Statement: for loop:{
         5-Using Loop Variables Outside the Loop for(long y = 0, x = 4; x < 5 && y < 10; x++, y++)
          {  System.out.print(y + " "); } System.out.print(x);  // DOES NOT COMPILE
         4-Using Incompatible Data Types in the Initialization Block 
         for(long y = 0, int x = 4; x < 5 && y<10; x++, y++) {   // DOES NOT COMPILE 
          System.out.print(x + " "); }
         3- Redeclaring a Variable in the Initialization Block int x = 0; for(long y = 0, x = 4; x < 5 && y < 10; x++, y++)
         {   // DOES NOT COMPILE  System.out.print(x + " "); } 
         2-Adding Multiple Terms to the for Statement int x = 0; for(long y = 0, z = 4; x < 5 && y < 10; x++, y++)
          {  System.out.print(y + " "); } System.out.print(x);
         1- Creating an Infinite Loop
            for( ; ; ) {  System.out.println("Hello World"); 
        }
     }

 }

